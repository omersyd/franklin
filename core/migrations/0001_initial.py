# Generated by Django 4.2.7 on 2025-09-28 06:45

from django.conf import settings
import django.contrib.postgres.indexes
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='App',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Application name', max_length=500)),
                ('category', models.CharField(db_index=True, help_text='App category', max_length=100)),
                ('rating', models.FloatField(blank=True, help_text='App rating (0-5 stars)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('reviews_count', models.IntegerField(default=0, help_text='Number of reviews')),
                ('size', models.CharField(blank=True, help_text='App size (e.g., "19M")', max_length=50)),
                ('installs', models.CharField(blank=True, db_index=True, help_text='Number of installs (e.g., "10,000+")', max_length=50)),
                ('app_type', models.CharField(blank=True, help_text='Free or Paid', max_length=20)),
                ('price', models.CharField(blank=True, help_text='App price', max_length=20)),
                ('content_rating', models.CharField(blank=True, help_text='Content rating (Everyone, Teen, etc.)', max_length=50)),
                ('genres', models.TextField(blank=True, help_text='App genres (semicolon separated)')),
                ('last_updated', models.CharField(blank=True, help_text='Last updated date', max_length=100)),
                ('current_version', models.CharField(blank=True, help_text='Current version', max_length=100)),
                ('android_version', models.CharField(blank=True, help_text='Required Android version', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'App',
                'verbose_name_plural': 'Apps',
                'ordering': ['-rating', '-reviews_count'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_text', models.TextField(help_text='Review content')),
                ('sentiment', models.CharField(blank=True, choices=[('Positive', 'Positive'), ('Negative', 'Negative'), ('Neutral', 'Neutral')], help_text='Review sentiment', max_length=10, null=True)),
                ('sentiment_polarity', models.FloatField(blank=True, help_text='Sentiment polarity (-1 to 1)', null=True, validators=[django.core.validators.MinValueValidator(-1.0), django.core.validators.MaxValueValidator(1.0)])),
                ('sentiment_subjectivity', models.FloatField(blank=True, help_text='Sentiment subjectivity (0 to 1)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('status', models.CharField(choices=[('approved', 'Approved'), ('pending', 'Pending Approval'), ('rejected', 'Rejected'), ('imported', 'Imported from CSV')], db_index=True, default='imported', help_text='Review approval status', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('app', models.ForeignKey(help_text='Associated app', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='core.app')),
                ('user', models.ForeignKey(blank=True, help_text='Review author (null for imported reviews)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewApproval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('approve', 'Approve'), ('reject', 'Reject')], help_text='Action taken', max_length=10)),
                ('comments', models.TextField(blank=True, help_text='Optional comments about the decision')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the action was taken')),
                ('review', models.ForeignKey(help_text='Review being acted upon', on_delete=django.db.models.deletion.CASCADE, related_name='approvals', to='core.review')),
                ('supervisor', models.ForeignKey(help_text='Supervisor who took action', on_delete=django.db.models.deletion.CASCADE, related_name='review_actions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Review Approval',
                'verbose_name_plural': 'Review Approvals',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='app',
            index=models.Index(fields=['name'], name='core_app_name_70c407_idx'),
        ),
        migrations.AddIndex(
            model_name='app',
            index=models.Index(fields=['category'], name='core_app_categor_880195_idx'),
        ),
        migrations.AddIndex(
            model_name='app',
            index=models.Index(fields=['rating'], name='core_app_rating_7bc39f_idx'),
        ),
        migrations.AddIndex(
            model_name='app',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name'], name='app_name_gin_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reviewapproval',
            unique_together={('review', 'supervisor')},
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['app', 'status'], name='core_review_app_id_feb9c3_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['status', 'created_at'], name='core_review_status_1a7233_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['sentiment'], name='core_review_sentime_fe9b9b_idx'),
        ),
    ]
